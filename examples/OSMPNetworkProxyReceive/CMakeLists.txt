cmake_minimum_required(VERSION 3.5)
project(OSMPNetworkProxyReceive)
include(CMakeDependentOption)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(PUBLIC_LOGGING OFF CACHE BOOL "Enable logging via FMI logger")
set(PRIVATE_LOGGING OFF CACHE BOOL "Enable private logging to file")
if(WIN32)
    set(PRIVATE_LOG_PATH_PROXY "C:/TEMP/OSMPNetworkProxyLog.log" CACHE FILEPATH "Path to write private log file to")
else()
    set(PRIVATE_LOG_PATH_PROXY "/tmp/OSMPNetworkProxyLog.log" CACHE FILEPATH "Path to write private log file to")
endif()
set(VERBOSE_FMI_LOGGING OFF CACHE BOOL "Enable detailed FMI function logging")
find_package(ZeroMQ)
option(WITH_ZMQ "Enable ZeroMQ Support" ${ZeroMQ_FOUND})
CMAKE_DEPENDENT_OPTION(WITH_ZMQ_STATIC "Link against static ZeroMQ Libs (requires PIC static libs)" ON "WITH_ZMQ" OFF)
if(WITH_ZMQ)
    add_definitions(-DWITH_ZMQ)
        if(WITH_ZMQ_STATIC)
                add_definitions(-DZMQ_STATIC)
        endif()
endif()
add_library(OSMPNetworkProxyReceive SHARED OSMPNetworkProxyReceive.cpp)
set_target_properties(OSMPNetworkProxyReceive PROPERTIES PREFIX "")
if(PRIVATE_LOGGING)
    file(TO_NATIVE_PATH ${PRIVATE_LOG_PATH_PROXY} PRIVATE_LOG_PATH_PROXY_NATIVE)
    string(REPLACE "\\" "\\\\" PRIVATE_LOG_PATH_PROXY_ESCAPED ${PRIVATE_LOG_PATH_PROXY_NATIVE})
    target_compile_definitions(OSMPNetworkProxyReceive PRIVATE
        "PRIVATE_LOG_PATH=\"${PRIVATE_LOG_PATH_PROXY_ESCAPED}\"")
endif()
target_compile_definitions(OSMPNetworkProxyReceive PRIVATE
    $<$<BOOL:${PUBLIC_LOGGING}>:PUBLIC_LOGGING>
    $<$<BOOL:${VERBOSE_FMI_LOGGING}>:VERBOSE_FMI_LOGGING>)
if(WITH_ZMQ)
    target_include_directories(OSMPNetworkProxyReceive PUBLIC ${ZeroMQ_INCLUDE_DIR})
#	if(WITH_ZMQ_STATIC)
#		target_link_libraries(OSMPNetworkProxyReceive ${ZeroMQ_LIBRARY_STATIC})
#	else()
        target_link_libraries(OSMPNetworkProxyReceive ${ZeroMQ_LIBRARY})
#	endif()
endif()
if(WIN32)
    target_link_libraries(OSMPNetworkProxyReceive wsock32 ws2_32)
endif()
if(WIN32)
    if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
        set(FMI_BINARIES_PLATFORM "win64")
    else()
        set(FMI_BINARIES_PLATFORM "win32")
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
        set(FMI_BINARIES_PLATFORM "linux64")
    else()
        set(FMI_BINARIES_PLATFORM "linux32")
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
        set(FMI_BINARIES_PLATFORM "darwin64")
    else()
        set(FMI_BINARIES_PLATFORM "darwin32")
    endif()
endif()
add_custom_command(TARGET OSMPNetworkProxyReceive
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E remove_directory "${CMAKE_CURRENT_BINARY_DIR}/buildfmu"
    COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/buildfmu/binaries/${FMI_BINARIES_PLATFORM}"
    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/modelDescription$<$<BOOL:${WITH_ZMQ}>:-zmq>.xml" "${CMAKE_CURRENT_BINARY_DIR}/buildfmu/modelDescription.xml"
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:OSMPNetworkProxyReceive> "${CMAKE_CURRENT_BINARY_DIR}/buildfmu/binaries/${FMI_BINARIES_PLATFORM}"
    COMMAND ${CMAKE_COMMAND} -E chdir "${CMAKE_CURRENT_BINARY_DIR}/buildfmu" ${CMAKE_COMMAND} -E tar "cfv" "../OSMPNetworkProxyReceive.fmu" --format=zip "modelDescription.xml" "${CMAKE_CURRENT_BINARY_DIR}/buildfmu/binaries/${FMI_BINARIES_PLATFORM}")
